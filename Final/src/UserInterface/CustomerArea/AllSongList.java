/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerArea;

import Music.Album;
import MusicEcosystem.Organization.CustomerOrganization;
import MusicEcosystem.UserAccount.CustomerAccount;
import MusicEcosystem.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author liwen
 */
public class AllSongList extends javax.swing.JPanel {

    /**
     * Creates new form AllSongList
     */
    private JPanel container;
    private CustomerOrganization customerOrganization;
    private CustomerAccount account;
    public AllSongList( JPanel container , CustomerOrganization customerOrganization, CustomerAccount account) {
        initComponents();
        this.container = container;
        this.customerOrganization = customerOrganization;
        this.account = account;
        populateTable();
        this.setSize(630, 511);
    }
    
    public void populateTable() {
        int count = songTbl.getRowCount();
        DefaultTableModel model = (DefaultTableModel) songTbl.getModel();
        for (int i = count - 1; i >= 0; i --) {
            model.removeRow(i);
        }
        for (UserAccount acc : customerOrganization.getUserAccountDirectory().getUserAccountList()) {
            CustomerAccount ca = (CustomerAccount)acc;
            for( Album al : ca.getAlbumDirectory().getAlbumList()) {
                if (al.getLimit().equals(Album.Limit.Pub.getValue())) {
                    Object[] row = new Object[2];
                    row[0] = al;
                    row[1] = ca;
                    model.addRow(row);
                }
            }
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        songTbl = new javax.swing.JTable();
        viewBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(217, 220, 242));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("All Song List");

        songTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ListName", "ListCreater"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(songTbl);

        viewBtn.setText("View Song in the List");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<<back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addComponent(backBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(291, 291, 291)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(149, 149, 149)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(viewBtn)
                .addGap(86, 86, 86)
                .addComponent(backBtn)
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
        Component[] components = container.getComponents();
        for (Component cp : components) {
            if (cp instanceof SongList) {
                SongList sl = (SongList) cp;
                sl.populateTable();
            }
        }
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        int selectRow = songTbl.getSelectedRow();
        if (selectRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select one row first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
       Album album = (Album) songTbl.getValueAt(selectRow, 0);
       ViewSongAddSong vasJP = new ViewSongAddSong(container, album.getSongDirectory(), account, album.getName());
       container.add("ViewSongAddSong", vasJP);
       CardLayout layout = (CardLayout) container.getLayout();
       layout.next(container);
    }//GEN-LAST:event_viewBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable songTbl;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
